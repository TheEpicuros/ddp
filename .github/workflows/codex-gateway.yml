---  # yamllint disable rule:line-length
name: codex-gateway

'on':
  workflow_dispatch:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write
  pull-requests: write
  issues: write

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: actionlint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run actionlint
        uses: reviewdog/action-actionlint@v1
        with:
          reporter: github-check
          fail_on_error: true
      - name: Proof line
        run: |
          set -euo pipefail
          echo ACTIONLINT=OK

  gateway:
    name: codex-gateway
    needs: lint
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' &&
       contains(join(github.event.issue.labels.*.name, ','), 'codex-task'))
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO: ${{ github.repository }}
      OWNER: ${{ github.repository_owner }}
      ISSUE_NUMBER: ${{ github.event.issue.number || '' }}
      EVENT_NAME: ${{ github.event_name }}
      DEFAULT_BASE: ${{ github.event.repository.default_branch || 'main' }}
    steps:
      - name: preflight
        id: preflight
        run: |
          set -euo pipefail
          body_raw="$(jq -r '.issue.body' "$GITHUB_EVENT_PATH")"
          if ! printf '%s' "$body_raw" | jq -e '
            . as $root
            | if (type == "object")
              then $root
              else error("Root must be an object")
              end
          ' >/dev/null 2>jq_err.txt; then
            JQ_ERROR=$(cat jq_err.txt)
            if [ "$EVENT_NAME" = "issues" ]; then
              gh api -X POST "repos/${REPO}/issues/${ISSUE_NUMBER}/comments" \
                -f body="$JQ_ERROR"
            fi
            exit 1
          fi
          echo "PREFLIGHT=START"
          echo "JSON_ROOT=object"
          echo "BODY_SHA256=$(printf '%s' "$body_raw" | sha256sum | awk '{print $1}')"
          printf 'ok=1\n' >> "$GITHUB_OUTPUT"
          printf 'body=%s\n' "$(printf '%s' "$body_raw" | base64 -w0)" >> "$GITHUB_OUTPUT"

      - name: Decode body
        if: ${{ success() && steps.preflight.outputs.ok == '1' }}
        run: |
          set -euo pipefail
          printf '%s' "${{ steps.preflight.outputs.body }}" | base64 -d > body.json

      - name: Schema guard with jq
        id: schema
        if: ${{ success() && steps.preflight.outputs.ok == '1' }}
        run: |
          set -euo pipefail
          jq -e '
            (type=="object") and
            (.path|type=="string" and startswith("codex/")) and
            (.title|type=="string") and
            (.message|type=="string") and
            (.content_mode|type=="string" and (.=="text" or .=="base64")) and
            (.content|type=="string")
          ' body.json >/dev/null

      - name: Extract fields
        id: fields
        if: ${{ success() && steps.preflight.outputs.ok == '1' }}
        run: |
          set -euo pipefail
          PATH_FIELD=$(jq -r '.path' body.json)
          MSG_FIELD=$(jq -r '.message' body.json)
          TITLE_FIELD=$(jq -r '.title' body.json)
          MODE_FIELD=$(jq -r '.content_mode' body.json)
          CONTENT_FIELD=$(jq -r '.content' body.json)
          {
            echo "path=$PATH_FIELD"
            echo "message=$MSG_FIELD"
            echo "title=$TITLE_FIELD"
            echo "mode=$MODE_FIELD"
            echo "content=$CONTENT_FIELD"
          } >> "$GITHUB_OUTPUT"

      - name: Enforce allowlist
        if: ${{ success() && steps.preflight.outputs.ok == '1' }}
        run: |
          set -euo pipefail
          case "${{ steps.fields.outputs.path }}" in
            codex/*) echo "Allowlisted path OK." ;;
            *) echo "::error::Path not allowlisted"; exit 1 ;;
          esac

      - name: Prepare content
        id: prep
        if: ${{ success() && steps.preflight.outputs.ok == '1' }}
        run: |
          set -euo pipefail
          MODE="${{ steps.fields.outputs.mode }}"
          printf '%s' "${{ steps.fields.outputs.content }}" > content.input
          if [ "$MODE" = "text" ]; then
            printf '%s' "${{ steps.fields.outputs.content }}" | base64 -w0 > content.b64
          else
            if ! base64 -d content.input >/dev/null 2>/dev/null; then
              echo "::error::Provided base64 content failed to decode"
              exit 1
            fi
            tr -d '\n' < content.input > content.b64
          fi

      - name: Compute branch name
        id: branch
        if: ${{ success() && steps.preflight.outputs.ok == '1' }}
        run: |
          set -euo pipefail
          if [ -n "${ISSUE_NUMBER}" ]; then
            echo "name=codex/issue-${ISSUE_NUMBER}" >> "$GITHUB_OUTPUT"
          else
            echo "name=codex/dispatch-${GITHUB_RUN_ID}" >> "$GITHUB_OUTPUT"
          fi

      - name: Idempotency check
        id: idem
        if: ${{ success() && steps.preflight.outputs.ok == '1' }}
        run: |
          set -euo pipefail
          BRANCH="${{ steps.branch.outputs.name }}"
          PATH_FIELD="${{ steps.fields.outputs.path }}"
          STATUS=0
          RESP=$(gh api "repos/${REPO}/contents/${PATH_FIELD}?ref=${BRANCH}" 2>err.txt) || STATUS=$?
          NEW_CONTENT_B64=$(cat content.b64)
          if [ $STATUS -eq 0 ]; then
            EXIST_B64=$(printf '%s' "$RESP" | jq -r '.content' | tr -d '\n')
            if [ "$EXIST_B64" = "$NEW_CONTENT_B64" ]; then
              echo "no=1" >> "$GITHUB_OUTPUT"
              echo "NO_CHANGES=1"
              if [ "$EVENT_NAME" = "issues" ]; then
                gh api -X POST "repos/${REPO}/issues/${ISSUE_NUMBER}/comments" \
                  -f body="No changes"
              fi
              exit 0
            fi
            SHA=$(printf '%s' "$RESP" | jq -r '.sha')
            echo "sha=$SHA" >> "$GITHUB_OUTPUT"
          else
            echo "sha=" >> "$GITHUB_OUTPUT"
          fi

      - name: Get base SHA
        id: base
        if: ${{ success() && steps.preflight.outputs.ok == '1' && steps.idem.outputs.no != '1' }}
        run: |
          set -euo pipefail
          SHA=$(gh api "repos/${REPO}/git/ref/heads/${DEFAULT_BASE}" --jq '.object.sha')
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"

      - name: Create branch
        if: ${{ success() && steps.preflight.outputs.ok == '1' && steps.idem.outputs.no != '1' }}
        run: |
          set -euo pipefail
          BRANCH="${{ steps.branch.outputs.name }}"
          STATUS=0
          gh api "repos/${REPO}/git/ref/heads/${BRANCH}" >/dev/null 2>&1 || STATUS=$?
          if [ $STATUS -ne 0 ]; then
            gh api -X POST "repos/${REPO}/git/refs" \
              -f ref="refs/heads/${BRANCH}" \
              -f sha="${{ steps.base.outputs.sha }}"
          fi

      - name: PUT file contents
        id: put
        if: ${{ success() && steps.preflight.outputs.ok == '1' && steps.idem.outputs.no != '1' }}
        run: |
          set -euo pipefail
          PATH_FIELD="${{ steps.fields.outputs.path }}"
          MSG_FIELD="${{ steps.fields.outputs.message }}"
          BRANCH="${{ steps.branch.outputs.name }}"
          B64=$(cat content.b64)
          ARGS=(-f message="$MSG_FIELD" -f content="$B64" -f branch="$BRANCH")
          if [ -n "${{ steps.idem.outputs.sha }}" ]; then
            ARGS+=(-f sha="${{ steps.idem.outputs.sha }}")
          fi
          RESP=$(gh api -X PUT "repos/${REPO}/contents/${PATH_FIELD}" "${ARGS[@]}")
          printf '%s' "$RESP" | jq -er '.content.sha' | tee new_sha.txt >/dev/null

      - name: Open PR
        id: pr
        if: ${{ success() && steps.preflight.outputs.ok == '1' && steps.idem.outputs.no != '1' }}
        run: |
          set -euo pipefail
          TITLE="${{ steps.fields.outputs.title }}"
          HEAD="${{ steps.branch.outputs.name }}"
          PR_JSON=$(gh api -X POST "repos/${REPO}/pulls" \
            -f title="$TITLE" \
            -f head="$HEAD" \
            -f base="${DEFAULT_BASE}" \
            -H "Accept: application/vnd.github+json")
          PR_URL=$(jq -r '.html_url' <<<"$PR_JSON")
          echo "url=$PR_URL" >> "$GITHUB_OUTPUT"
          echo "PR_URL=$PR_URL" >> "$GITHUB_ENV"

      - name: Comment PR URL on Issue
        if: ${{ success() && steps.preflight.outputs.ok == '1' && steps.idem.outputs.no != '1' && env.ISSUE_NUMBER != '' }}
        run: |
          set -euo pipefail
          gh api -X POST "repos/${REPO}/issues/${ISSUE_NUMBER}/comments" \
            -f body="Opened PR: ${PR_URL}"

      - name: Proof line
        if: ${{ success() && steps.preflight.outputs.ok == '1' && steps.idem.outputs.no != '1' }}
        run: |
          set -euo pipefail
          echo "PR_URL=${PR_URL}"
