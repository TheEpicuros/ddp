name: codex-gateway

on:
  workflow_dispatch:
  issues:
    types:
      - opened
      - edited
      - labeled

jobs:
  gateway:
    runs-on: ubuntu-latest

    # Minimal, explicit permissions for this job
    permissions:
      contents: write        # write file on a branch
      pull-requests: write   # open PR
      issues: write          # comment on the triggering issue

    steps:
      - name: Gate — require label "codex-task" or the act of adding it
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          if [ "${GITHUB_EVENT_NAME}" != "issues" ]; then
            echo "Manual run — no issue context." >> "$GITHUB_STEP_SUMMARY"
            echo "go=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          LABEL="codex-task"
          EVENT_ACTION="$(jq -r '.action' "$GITHUB_EVENT_PATH")"
          ISSUE_NUMBER="$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")"
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> "$GITHUB_ENV"

          has_label=false
          jq -r '.issue.labels[].name' "$GITHUB_EVENT_PATH" 2>/dev/null | while read -r n; do
            if [ "$n" = "$LABEL" ]; then has_label=true; fi
          done

          is_label_add=false
          if [ "$EVENT_ACTION" = "labeled" ]; then
            added="$(jq -r '.label.name' "$GITHUB_EVENT_PATH" 2>/dev/null || true)"
            if [ "$added" = "$LABEL" ]; then is_label_add=true; fi
          fi

          if $has_label || $is_label_add; then
            echo "go=true" >> "$GITHUB_OUTPUT"
            echo "Gate: proceeding (label present or just added)."
          else
            echo "go=false" >> "$GITHUB_OUTPUT"
            echo "No 'codex-task' label; exiting cleanly." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Extract body → /tmp/body.json (strict) + basic schema check
        id: validate
        if: steps.gate.outputs.go == 'true'
        shell: bash
        run: |
          set -euo pipefail

          # Helper for comments back to the issue
          api="https://api.github.com"
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          issue="$ISSUE_NUMBER"
          token="${CODEX_PAT:-$GITHUB_TOKEN}"
          comment() {
            local msg="$1"
            curl -sS -X POST \
              -H "Authorization: Bearer ${token}" \
              -H "Accept: application/vnd.github+json" \
              "${api}/repos/${owner}/${repo}/issues/${issue}/comments" \
              -d "$(jq -Rn --arg b "$msg" '{body:$b}')"
          }

          # Pull raw body text and persist
          jq -r '.issue.body' "$GITHUB_EVENT_PATH" > /tmp/body.raw

          # STRICT JSON parse (no code fences/smart quotes stripping here by design)
          if ! jq -e . /tmp/body.raw >/dev/null 2>&1; then
            comment "❌ Parse error: Issue body is not strict JSON. Remove code fences, smart quotes, trailing commas, or stray text. Provide only the JSON object on a single body."
            echo "ok=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          cp /tmp/body.raw /tmp/req.json

          # Required keys + content_mode ∈ {text, base64}
          if ! jq -e '
            .path and .message and .title and .content_mode and .content
            and (.content_mode=="text" or .content_mode=="base64")
          ' /tmp/req.json >/dev/null 2>&1; then
            comment "❌ Schema error: required keys are {path, message, title, content_mode, content} with content_mode ∈ {text, base64}."
            echo "ok=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Export for later steps
          path="$(jq -r '.path' /tmp/req.json)"
          mode="$(jq -r '.content_mode' /tmp/req.json)"
          msg="$(jq -r '.message' /tmp/req.json)"
          title="$(jq -r '.title' /tmp/req.json)"
          branch_prefix="$(jq -r '.branch_prefix // empty' /tmp/req.json)"
          echo "REQ_PATH=$path" >> "$GITHUB_ENV"
          echo "REQ_MODE=$mode" >> "$GITHUB_ENV"
          echo "REQ_MSG=$msg" >> "$GITHUB_ENV"
          echo "REQ_TITLE=$title" >> "$GITHUB_ENV"
          echo "REQ_BRANCH_PREFIX=$branch_prefix" >> "$GITHUB_ENV"

          # Size guard for text mode (>150 KB)
          if [ "$mode" = "text" ]; then
            # exact bytes of raw string
            jq -r '.content' /tmp/req.json > /tmp/req.content.text
            bytes="$(wc -c < /tmp/req.content.text | tr -d ' ')"
            echo "content_bytes=$bytes limit=153600"
            if [ "$bytes" -gt 153600 ]; then
              comment "⚠️ Content too large for \"text\" mode (${bytes} bytes > 150 KB). Please resend using \"content_mode\":\"base64\" with one-line base64 (e.g., `base64 -w0 yourfile > out.b64`)."
              echo "ok=false" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi

          # Allowlist: path must start with codex/
          if [[ "$path" != codex/* ]]; then
            comment "❌ Allowlist violation: path must start with `codex/`. Provided: `$path`."
            echo "ok=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "ok=true" >> "$GITHUB_OUTPUT"

      - name: Derive base + temp branch
        id: derive
        if: steps.validate.outputs.ok == 'true'
        shell: bash
        run: |
          set -euo pipefail
          api="https://api.github.com"
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          token="${CODEX_PAT:-$GITHUB_TOKEN}"

          # Repo default branch & its SHA
          repo_json="$(curl -sS -H "Authorization: Bearer ${token}" -H "Accept: application/vnd.github+json" "${api}/repos/${owner}/${repo}")"
          base_branch="$(jq -r '.default_branch' <<<"$repo_json")"
          base_sha="$(jq -r '.pushed_at as $x | .default_branch as $b | . | .default_branch' <<<"$repo_json" >/dev/null 2>&1; curl -sS -H "Authorization: Bearer ${token}" -H "Accept: application/vnd.github+json" "${api}/repos/${owner}/${repo}/git/refs/heads/${base_branch}" | jq -r '.object.sha')"

          # Compose branch name
          short="$(echo "$base_sha" | cut -c1-7)"
          epoch="$(date +%s)"
          if [ -n "${REQ_BRANCH_PREFIX:-}" ]; then
            new_branch="${REQ_BRANCH_PREFIX}-${short}-${epoch}"
          else
            new_branch="codex-${short}-${epoch}"
          fi

          echo "BASE_BRANCH=$base_branch" >> "$GITHUB_ENV"
          echo "BASE_SHA=$base_sha" >> "$GITHUB_ENV"
          echo "NEW_BRANCH=$new_branch" >> "$GITHUB_ENV"
          echo "Derived base=${base_branch} sha=${base_sha} new_branch=${new_branch}"

      - name: Idempotency preflight — compare proposed content vs base
        id: preflight
        if: steps.validate.outputs.ok == 'true'
        shell: bash
        run: |
          set -euo pipefail
          api="https://api.github.com"
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          token="${CODEX_PAT:-$GITHUB_TOKEN}"

          # Build proposed content as BASE64
          if [ "$REQ_MODE" = "text" ]; then
            jq -r '.content' /tmp/req.json | base64 -w0 > /tmp/proposed.b64
          else
            # use provided base64 as-is, but strip whitespace/newlines just in case
            jq -r '.content' /tmp/req.json | tr -d '\n\r\t ' > /tmp/provided.b64
            cp /tmp/provided.b64 /tmp/proposed.b64
          fi

          # Fetch existing file on base (if it exists)
          status_code=$(curl -sS -w "%{http_code}" -o /tmp/get.json \
            -H "Authorization: Bearer ${token}" -H "Accept: application/vnd.github+json" \
            "${api}/repos/${owner}/${repo}/contents/${REQ_PATH}?ref=${BASE_BRANCH}")
          if [ "$status_code" = "200" ]; then
            jq -r '.content' /tmp/get.json | tr -d '\n\r\t ' > /tmp/existing.b64
            if cmp -s /tmp/proposed.b64 /tmp/existing.b64; then
              # Content identical — comment and stop
              curl -sS -X POST -H "Authorization: Bearer ${token}" -H "Accept: application/vnd.github+json" \
                "${api}/repos/${owner}/${repo}/issues/${ISSUE_NUMBER}/comments" \
                -d "$(jq -Rn --arg b "ℹ️ No changes for ${REQ_PATH} on ${BASE_BRANCH} — skipping PR." '{body:$b}')"
              echo "go=false" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi

          echo "go=true" >> "$GITHUB_OUTPUT"

      - name: Create branch from base
        if: steps.preflight.outputs.go == 'true'
        shell: bash
        run: |
          set -euo pipefail
          api="https://api.github.com"
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          token="${CODEX_PAT:-$GITHUB_TOKEN}"

          curl -sS -X POST \
            -H "Authorization: Bearer ${token}" \
            -H "Accept: application/vnd.github+json" \
            "${api}/repos/${owner}/${repo}/git/refs" \
            -d "$(jq -Rn --arg ref "refs/heads/${NEW_BRANCH}" --arg sha "$BASE_SHA" '{ref:$ref, sha:$sha}')"

      - name: Write content via Contents API
        id: putfile
        if: steps.preflight.outputs.go == 'true'
        shell: bash
        run: |
          set -euo pipefail
          api="https://api.github.com"
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          token="${CODEX_PAT:-$GITHUB_TOKEN}"

          content="$(cat /tmp/proposed.b64)"
          payload="$(jq -Rn --arg msg "$REQ_MSG" --arg c "$content" --arg br "$NEW_BRANCH" '{message:$msg, content:$c, branch:$br}')"

          # Attempt create/update (on new branch this will be a create)
          curl -sS -X PUT \
            -H "Authorization: Bearer ${token}" \
            -H "Accept: application/vnd.github+json" \
            "${api}/repos/${owner}/${repo}/contents/${REQ_PATH}" \
            -d "$payload" > /tmp/put.json

      - name: Open pull request
        id: pr
        if: steps.preflight.outputs.go == 'true'
        shell: bash
        run: |
          set -euo pipefail
          api="https://api.github.com"
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          token="${CODEX_PAT:-$GITHUB_TOKEN}"

          pr_json="$(curl -sS -X POST \
            -H "Authorization: Bearer ${token}" \
            -H "Accept: application/vnd.github+json" \
            "${api}/repos/${owner}/${repo}/pulls" \
            -d "$(jq -Rn --arg t "$REQ_TITLE" --arg h "$NEW_BRANCH" --arg b "$BASE_BRANCH" '{title:$t, head:$h, base:$b}')")"

          pr_number="$(jq -r '.number' <<<"$pr_json")"
          pr_url="$(jq -r '.html_url' <<<"$pr_json")"
          echo "PR_NUMBER=$pr_number" >> "$GITHUB_ENV"
          echo "PR_URL=$pr_url" >> "$GITHUB_ENV"
          echo "Opened PR: ${pr_url}"

      - name: Comment PR link back to the issue
        if: steps.preflight.outputs.go == 'true'
        shell: bash
        run: |
          set -euo pipefail
          api="https://api.github.com"
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          token="${CODEX_PAT:-$GITHUB_TOKEN}"

          body="Opened PR: ${PR_URL} (changed: ${REQ_PATH})"
          curl -sS -X POST \
            -H "Authorization: Bearer ${token}" \
            -H "Accept: application/vnd.github+json" \
            "${api}/repos/${owner}/${repo}/issues/${ISSUE_NUMBER}/comments" \
            -d "$(jq -Rn --arg b "$body" '{body:$b}')"
