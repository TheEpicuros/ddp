---
name: codex-gateway

on:
  workflow_dispatch:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  lint:
    name: actionlint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run actionlint
        uses: reviewdog/action-actionlint@v1
        with:
          reporter: github-check
          fail_on_error: true

  gateway:
    name: codex-gateway
    needs: lint
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' && (
         contains(join(github.event.issue.labels.*.name, ','), 'codex-task')
      ))
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO: ${{ github.repository }}
      OWNER: ${{ github.repository_owner }}
      ISSUE_NUMBER: ${{ github.event.issue.number || '' }}
      EVENT_NAME: ${{ github.event_name }}
      DEFAULT_BASE: ${{ github.event.repository.default_branch || 'main' }}
    steps:
      - name: Setup shell
        run: |
          set -euo pipefail

      - name: Extract and persist Issue body as-is
        id: save_body
        run: |
          set -euo pipefail
          if [ "${EVENT_NAME}" = "issues" ]; then
            printf '%s' "${{ github.event.issue.body }}" > body.json
          else
            echo '{}' > body.json
          fi
          echo "len=$(wc -c < body.json | tr -d ' ')" >> "$GITHUB_OUTPUT"

      - name: Validate strict JSON (parse only)
        id: parse
        run: |
          set -euo pipefail
          # This must be STRICT JSON: no fences, no markdown, no trailing chars.
          # If not strict JSON, jq will fail here.
          if ! jq -e . body.json >/dev/null 2>jq_parse_err.txt; then
            ERR=$(cat jq_parse_err.txt | sed 's/"/\\"/g')
            echo "parse_error=${ERR}" >> "$GITHUB_OUTPUT"
            echo "HTTP_STATUS=422" >> "$GITHUB_ENV"
            exit 1
          fi

      - name: Schema guard with jq
        id: schema
        run: |
          set -euo pipefail
          # Enforce required fields and constraints:
          # - path: string, starts with "codex/"
          # - message: string
          # - title: string
          # - content_mode: "text" | "base64"
          # - content: non-empty string
          # Produce a clear single-line error message on failure.
          if ! jq -r -e '
            (type=="object") or (error("Root must be an object"));
            has("path") or (error("missing key: path"));
            has("message") or (error("missing key: message"));
            has("title") or (error("missing key: title"));
            has("content_mode") or (error("missing key: content_mode"));
            has("content") or (error("missing key: content"));
            (.path|type=="string") or (error("path must be string"));
            (.path|startswith("codex/")) or (error("path must start with \"codex/\""));
            (.message|type=="string") or (error("message must be string"));
            (.title|type=="string") or (error("title must be string"));
            (.content_mode|type=="string") or (error("content_mode must be string"));
            (.content_mode=="text" or .content_mode=="base64")
              or (error("content_mode must be \"text\" or \"base64\""));
            (.content|type=="string" and (.content|length>0))
              or (error("content must be a non-empty string"));
            1
          ' body.json 2>jq_schema_err.txt; then
            ERR=$(tr -d '\n' < jq_schema_err.txt | sed 's/"/\\"/g')
            echo "schema_error=${ERR}" >> "$GITHUB_OUTPUT"
            echo "HTTP_STATUS=422" >> "$GITHUB_ENV"
            exit 1
          fi
          echo "HTTP_STATUS=200" >> "$GITHUB_ENV"

      - name: On failure â†’ comment jq error and exit (HTTP 422)
        if: failure()
        run: |
          set -euo pipefail
          if [ "${EVENT_NAME}" != "issues" ]; then
            echo "Non-issues event failed validation."
            exit 1
          fi
          # Prefer schema error, else parse error
          ERR="${{ steps.schema.outputs.schema_error || steps.parse.outputs.parse_error || 'validation failed' }}"
          PAYLOAD=$(jq -cn --arg body "Schema check failed (HTTP 422): $ERR" '{body:$body}')
          gh api \
            -X POST \
            "repos/${REPO}/issues/${ISSUE_NUMBER}/comments" \
            -H "Accept: application/vnd.github+json" \
            -f body="$(jq -r '.body' <<<"$PAYLOAD")"
          # Exit code 1 (runner shows 1). We also set HTTP_STATUS=422 above.
          exit 1

      - name: Extract fields (trusted after schema)
        id: fields
        if: success()
        run: |
          set -euo pipefail
          PATH_FIELD=$(jq -r '.path' body.json)
          MSG_FIELD=$(jq -r '.message' body.json)
          TITLE_FIELD=$(jq -r '.title' body.json)
          MODE_FIELD=$(jq -r '.content_mode' body.json)
          CONTENT_FIELD=$(jq -r '.content' body.json)

          echo "path=$PATH_FIELD" >> "$GITHUB_OUTPUT"
          echo "message=$MSG_FIELD" >> "$GITHUB_OUTPUT"
          echo "title=$TITLE_FIELD" >> "$GITHUB_OUTPUT"
          echo "mode=$MODE_FIELD" >> "$GITHUB_OUTPUT"
          # Content may be large; store to a file for later steps
          printf '%s' "$CONTENT_FIELD" > content.input

      - name: Enforce allowlist (codex/* only)
        if: success()
        run: |
          set -euo pipefail
          case "${{ steps.fields.outputs.path }}" in
            codex/*) echo "Allowlisted path OK." ;;
            *) echo "::error::Path not allowlisted"; exit 1 ;;
          esac

      - name: Compute branch name
        id: branch
        if: success()
        run: |
          set -euo pipefail
          if [ -n "${ISSUE_NUMBER}" ]; then
            BRANCH="codex/${ISSUE_NUMBER}-${GITHUB_RUN_ID}"
          else
            TS=$(date +%s)
            BRANCH="codex/dispatch-${TS}-${GITHUB_RUN_ID}"
          fi
          echo "name=$BRANCH" >> "$GITHUB_OUTPUT"

      - name: Get base SHA
        id: base
        if: success()
        run: |
          set -euo pipefail
          SHA=$(gh api "repos/${REPO}/git/ref/heads/${DEFAULT_BASE}" --jq .object.sha)
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"

      - name: Create branch
        if: success()
        run: |
          set -euo pipefail
          gh api -X POST "repos/${REPO}/git/refs" \
            -f ref="refs/heads/${{ steps.branch.outputs.name }}" \
            -f sha="${{ steps.base.outputs.sha }}"

      - name: Prepare base64 content
        id: b64
        if: success()
        run: |
          set -euo pipefail
          MODE="${{ steps.fields.outputs.mode }}"
          if [ "$MODE" = "text" ]; then
            base64 -w0 content.input > content.b64
          else
            # MODE == base64 (already)
            # Validate it decodes
            if ! base64 -d content.input >/dev/null 2>/dev/null; then
              echo "::error::Provided base64 content failed to decode"
              exit 1
            fi
            tr -d '\n' < content.input > content.b64
          fi
          echo "ok=1" >> "$GITHUB_OUTPUT"

      - name: PUT file contents
        id: put
        if: success()
        run: |
          set -euo pipefail
          PATH_FIELD="${{ steps.fields.outputs.path }}"
          MSG_FIELD="${{ steps.fields.outputs.message }}"
          B64=$(cat content.b64)

          gh api -X PUT "repos/${REPO}/contents/${PATH_FIELD}" \
            -f message="${MSG_FIELD}" \
            -f content="${B64}" \
            -f branch="${{ steps.branch.outputs.name }}" \
            --silent --jq '.content.sha' | tee new_sha.txt >/dev/null

      - name: Open PR
        id: pr
        if: success()
        run: |
          set -euo pipefail
          TITLE="${{ steps.fields.outputs.title }}"
          HEAD="${{ steps.branch.outputs.name }}"
          PR_JSON=$(gh api -X POST "repos/${REPO}/pulls" \
            -f title="${TITLE}" \
            -f head="${HEAD}" \
            -f base="${DEFAULT_BASE}" \
            -H "Accept: application/vnd.github+json")
          PR_URL=$(jq -r '.html_url' <<<"$PR_JSON")
          echo "url=$PR_URL" >> "$GITHUB_OUTPUT"
          echo "PR_URL=${PR_URL}" >> "$GITHUB_ENV"

      - name: Comment PR URL on Issue
        if: success() && env.ISSUE_NUMBER != ''
        run: |
          set -euo pipefail
          gh api -X POST "repos/${REPO}/issues/${ISSUE_NUMBER}/comments" \
            -f body="Opened PR: ${PR_URL}"

      - name: Proof line
        if: success()
        run: |
          set -euo pipefail
          echo "PR_URL=${PR_URL}"
